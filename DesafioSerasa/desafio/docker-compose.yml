version: '3.8'

services:
  # Banco de Dados (Base A)
  postgres:
    image: postgres:15
    container_name: desafio-postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: base_a
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d base_a"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MongoDB (Base B)
  mongodb:
    image: mongo:6
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis (Base C)
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
    ports:
      - "29092:29092"
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  basea:
    build:
      context: .
      dockerfile: baseA/Dockerfile
    ports:
      - "8081:8080"

  baseb:
    build:
      context: .
      dockerfile: baseB/Dockerfile
    ports:
      - "8082:8080"

  basec:
    build:
      context: .
      dockerfile: baseC/Dockerfile
    ports:
      - "8084:8080"
volumes:
  pgdata: